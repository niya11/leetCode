class Solution {
  
    
public:
    deque<int> dq;
    void clean_dq(int i,int k, vector<int> &nums)
    {
        if(!dq.empty() && dq.front()==i-k)
            dq.pop_front();
        
        while(!dq.empty() && nums[i]>nums[dq.back()])
            dq.pop_back();
    }
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        int n=nums.size();
        if(n==0 || k==0)
            return  {};
        if(k==1)
            return nums;
        
        vector<int> ans(n-k+1,0);
        int max_id=0;
        
        for(int i=0;i<k;i++)
        {
            clean_dq(i,k,nums);
            dq.push_back(i);
            if(nums[i]>nums[max_id])
                max_id=i;
        }
        
        ans[0]=nums[max_id];
        for(int i=k;i<n;i++)
        {
            clean_dq(i,k,nums);
            dq.push_back(i);
            ans[i-k+1]=nums[dq.front()];
        }
        return ans;
        
    }
    
};
