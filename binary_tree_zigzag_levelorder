#include<algorithm>
#include<queue>
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        TreeNode *marker=new TreeNode(-9999);
        if(root==NULL)
            return {};
      vector<vector<int>> ans;
      queue<TreeNode*> lis;
      ans.push_back({root->val});
      lis.push(root);
      lis.push(marker);
      TreeNode* temp=new TreeNode(0);
      int level=0;
        vector<int> ugh;
      while(lis.size()!=0)
      {
             temp=(lis.front());
             lis.pop();
             if(temp->val==-9999)
             {                 
                 if(lis.size()!=0)
                 {
                    if(level==0)
                    {
                        reverse(ugh.begin(),ugh.end());
                        level=1;
                    }
                     else
                     {
                         level=0;
                     }
                    ans.push_back(ugh);
                    ugh.clear();
                    lis.push(marker);
                     
                 }
                 continue;
             }
             if(temp!=NULL && temp->left!=NULL)
             {   
                ugh.push_back(temp->left->val);
                lis.push(temp->left);
             }
             if(temp!=NULL && temp->right!=NULL)
             {
                ugh.push_back(temp->right->val);
                lis.push(temp->right);
             }    
      }

        return ans;
           
        
    }
};
