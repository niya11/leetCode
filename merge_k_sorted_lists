/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
//typedef pair<int, ListNode*> pi; 
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue< pair<int, ListNode*>> heap;
        ListNode* newL=new ListNode();
        ListNode* head=newL;
         for(int i=0;i<lists.size();i++)
        {
             if(lists[i]!=NULL)
                heap.push(pair(-1*(lists[i]->val),lists[i]));        
        }
        ListNode* temp;
        while(heap.size()!=0)
        {
            newL->next=heap.top().second; 
            newL=newL->next;
            temp=heap.top().second;
            heap.pop();
            if(temp->next!=NULL)
            {
                temp=temp->next;
                heap.push(pair(-1*(temp->val),temp));
            }
        }
        return head->next;
       
    }
};
