/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* tempA;
        ListNode* tempB;
        tempA=headA;
        tempB=headB;
        int flagA=0;
        int flagB=0;
        if(tempA==NULL || tempB==NULL)
            return NULL;
        while(1)
        {
            if(tempA->next==NULL)
            {
                if(tempB->next==NULL)
                {
                    flagA=flagB=0;
                    break;
                }
                else
                {
                    while(tempB->next!=NULL)
                    {
                        tempB=tempB->next;
                        flagB++;
                    }
                    break;
                }
                
            }
            else
            {
                if(tempB->next==NULL)
                {
                    while(tempA->next!=NULL)
                    {
                        tempA=tempA->next;
                        flagA++;
                    }
                    break;
                }
                else
                {
                    tempB=tempB->next;
                    tempA=tempA->next;
                }
            }
        }
        
        tempA=headA;
        tempB=headB;
        if(flagA==flagB)
        {
            while(tempA!=tempB)
            {
                tempA=tempA->next;
                tempB=tempB->next;
                if(tempA==NULL || tempB==NULL)
                {
                    return NULL;
                }
            }
            
            return tempA;
        }
        else
        {
            if(flagA>0)
            {
                while(flagA!=0)
                {
                    tempA=tempA->next;
                    flagA--;
                }
                while(tempA!=tempB)
                {
                    tempA=tempA->next;
                    tempB=tempB->next;
                    if(tempA==NULL || tempB==NULL)
                    {
                        return NULL;
                    }
                }
                return tempA;
            }
            else
            {
                if(flagB>0)
                {
                    while(flagB!=0)
                    {
                     tempB=tempB->next;
                     flagB--;
                    }
                    while(tempA!=tempB)
                    {
                        tempA=tempA->next;
                        tempB=tempB->next;
                        if(tempA==NULL || tempB==NULL)
                        {
                            return NULL;
                        }
                    }
                    return tempB;
                }
            }
            return NULL;
        }
    }
};
