class Solution {
public:
    int ans=-1;
    int findStart(int left, int right, vector<int>& nums, int target)
    {
        if(nums[left]<nums[right])
            return 0;
        
        int pivot=-1;
        while(left<=right)
        {
            pivot=(left+right)/2;
            if(nums[pivot]>nums[pivot+1])
                return pivot+1;
            else
            {
                if(nums[pivot]<nums[left])
                    right=pivot-1;
                else
                    left=pivot+1;
            }
            
        }
        return pivot;
    }
    void binarySearch(int low, int high,vector<int>& nums, int target)
    {
      if(low<=high)
      {
          int mid=(low+high)/2;
          if(nums[mid]==target)
              ans=mid;
          if(nums[mid]>target)
              binarySearch(low,mid-1,nums,target);
          else
              binarySearch(mid+1,high,nums,target);
      }
    }
    
    int search(vector<int>& nums, int target) {
        if(nums.size()==0)
            return -1;
        if(nums.size()==1)
            return nums[0]==target?0:-1;
        
        int index=findStart(0,nums.size()-1 , nums, target);
        if(index==0)
            binarySearch(0,nums.size()-1,nums,target);
        else
            if(target>=nums[0] && target<=nums[index-1] )
            {
                binarySearch(0,index-1,nums,target);
            }
            else
            {
                binarySearch(index,nums.size()-1,nums,target);
            }
        
        return ans;
    }
};
